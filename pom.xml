<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>com.test</groupId>
	<artifactId>mylogin</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<!--<packaging>jar</packaging>-->
	<packaging>war</packaging>

	<name>mylogin</name>
	<description>Demo project for Spring Boot</description>

	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>1.5.3.RELEASE</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<java.version>1.7</java.version>
	</properties>

	<dependencies>
		<!--
			很多SpringBoot的启动器(spring-boot-starter-xxx)最终都会依赖到spring-boot-starter(这是SpringBoot的核心启动器，包含了自动配置、日志和YAML)
			配置log4j2需要去掉SpringBoot的默认的log配置，就在spring-boot-starter这个核心启动器这里做统一配置即可
		-->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter</artifactId>
			<exclusions>
				<exclusion>
					<groupId>org.springframework.boot</groupId>
					<artifactId>spring-boot-starter-logging</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<!-- 引入log4j2依赖 -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-log4j2</artifactId>
		</dependency>
		<!-- log4j2解析yml与springBoot不同，加上这个才能辨认到log4j2.yml文件 -->
		<dependency>
			<groupId>com.fasterxml.jackson.dataformat</groupId>
			<artifactId>jackson-dataformat-yaml</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
			<!--
				加载spring-boot-starter-web的时候，排除掉以下内置Tomcat这个依赖。因为如果是打成war包，是放在外部Tomcat上运行，就不需要
			 	这个内置Tomcat了
			 -->
			<exclusions>
				<exclusion>
					<groupId>org.springframework.boot</groupId>
					<artifactId>spring-boot-starter-tomcat</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<!--
			上面把内置Tomcat这个依赖排除掉了，会导致编译代码的时候失败(可能是springboot项目编译时必须依赖内置Tomcat的某些代码)，所以要单独
			声明内置Tomcat这个依赖，但是通过<scope>provided</scope>控制在打包时是否要打进包文件里
		-->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-tomcat</artifactId>
			<!--
				声明了provided表示打包时不会将该依赖一起打包进去。打成war包时，要声明provided，因为war包是放在第三方Tomcat上运行的，不需要
				这个内置Tomcat；打成jar包时，不要声明provided，因为jar包需要这个内置Tomcat来运行。
			-->
			<scope>provided</scope>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-configuration-processor</artifactId>
			<optional>true</optional>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-thymeleaf</artifactId>
		</dependency>

		<dependency>
			<groupId>org.apache.shiro</groupId>
			<artifactId>shiro-spring</artifactId>
			<version>1.3.2</version>
		</dependency>

		<dependency>
			<groupId>com.alibaba</groupId>
			<artifactId>fastjson</artifactId>
			<version>1.1.41</version>
		</dependency>

		<dependency>
			<groupId>redis.clients</groupId>
			<artifactId>jedis</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-redis</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.session</groupId>
			<artifactId>spring-session</artifactId>
		</dependency>
	</dependencies>

	<build>
		<!-- 指定打包插件 -->
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<!-- spring-boot-maven-plugin 是springboot提供的一个打包插件-->
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
		</plugins>
		<resources>
			<resource>
				<directory>src/main/resources</directory>
				<!-- 资源根目录排除各环境的配置，使用单独的资源目录来指定 -->
				<excludes>
					<exclude>profiles/production/**</exclude>
					<exclude>profiles/development/**</exclude>
					<exclude>profiles/test/**</exclude>
					<exclude>pages/**</exclude>
				</excludes>
			</resource>
			<resource>
				<directory>src/main/resources/profiles/${profiles.active}</directory>
			</resource>
		</resources>
	</build>

	<profiles>
		<!-- 本地环境 -->
		<profile>
			<id>local</id>
			<properties>
				<profiles.active>local</profiles.active>
			</properties>
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>
		</profile>
		<!-- 开发环境 -->
		<profile>
			<id>development</id>
			<properties>
				<profiles.active>development</profiles.active>
			</properties>
		</profile>
		<!-- 生产环境 -->
		<profile>
			<id>production</id>
			<properties>
				<profiles.active>production</profiles.active>
			</properties>
		</profile>
		<!-- 测试环境 -->
		<profile>
			<id>test</id>
			<properties>
				<profiles.active>test</profiles.active>
			</properties>
		</profile>
	</profiles>
</project>
